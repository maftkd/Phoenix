using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Fly : MonoBehaviour
{
	public static Fly _instance;
	Hop _hop;
	public Vector2 _mouseSens;
	public Vector3 _maxEulers;
	Vector3 _velocity;
	public Vector3 _gravity;
	public AudioClip _flip;
	public AudioClip _flap;
	AudioSource [] _flapSources;
	public Vector3 _wingFlapVel;
	Collider[] _hitCheck;
	public Vector3 _maxVel;
	Vector3 _flatVelocity;
	Vector3 _flatRight;
	public float _turnSpeed;//degreesPerSec
	float _turnAmount;

	void Awake(){
		_instance=this;
		_flapSources = transform.Find("Flaps").GetComponentsInChildren<AudioSource>();
		_hitCheck = new Collider[5];
	}

	void OnDisable(){
		Cursor.lockState = CursorLockMode.None; 
		Cursor.visible=false;
	}

	void OnEnable(){
		Cursor.lockState = CursorLockMode.Locked; 
		Cursor.visible=false;
		_velocity=Vector3.zero;
		if(_hop==null)
			_hop=Hop._instance;
		_flatVelocity=transform.forward;
		_flatVelocity.y=0;
		_flatVelocity.Normalize();
		_flatRight=Vector3.Cross(Vector3.up,_flatVelocity);

		Flip();
	}

    // Start is called before the first frame update
    void Start()
    {
    }

    // Update is called once per frame
    void Update()
    {
		//cursor
		if(Input.GetKeyDown(KeyCode.LeftControl)){
			Cursor.visible = !Cursor.visible;
			Cursor.lockState = Cursor.lockState==CursorLockMode.Locked? 
				CursorLockMode.None : CursorLockMode.Locked;
		}

		//mouse input
		float mouseX = Input.GetAxis("Mouse X");
		float mouseY = Input.GetAxis("Mouse Y");

		//rotate
		Quaternion prevRot=transform.rotation;
		transform.Rotate(Vector3.up*mouseX*_mouseSens.y, Space.World);
		Vector2 camLook = new Vector2(transform.forward.x,transform.forward.z);
		float ang = Vector2.Angle(camLook,new Vector2(_flatVelocity.x,_flatVelocity.z));
		if(ang>_maxEulers.y)
			transform.rotation=prevRot;

		//faster speed -> less gravity
		Vector2 forward=new Vector2(_velocity.x,_velocity.z);
		//#slow - do we need to get mag every frame? could we instead track it?
		float forwardMag=forward.magnitude;
		float gravityMult = 1-forward.sqrMagnitude/(_maxVel.z*_maxVel.z);
		float windResist=1f;
		gravityMult*=0.5f;
		if(Input.GetMouseButton(0) || Input.GetMouseButton(1)){
			//wings tucked -> more gravity
			gravityMult*=2f;
			windResist*=0.5f;
		}
		//apply vertical grav
		_velocity+=Vector3.down*_gravity.y*gravityMult*Time.deltaTime;
		
		//apply wind resistance
		if(forwardMag>0){
			forward-=(forward/forwardMag)*_gravity.z*windResist;
			if(forward.sqrMagnitude<0)
				forward=Vector2.zero;
			_velocity.x=forward.x;
			_velocity.z=forward.y;
		}

		//wing flap
		if(Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1)){
			Flip();
		}
		else if(Input.GetMouseButtonUp(0) || Input.GetMouseButtonUp(1)){
			Flap();
		}

		transform.position+=_velocity*Time.deltaTime;

		//ground check
		if(Physics.OverlapSphereNonAlloc(transform.position,_hop._height,_hitCheck)>0){
			Debug.Log("ground check");
			enabled=false;
			_hop.enabled=true;
		}
        
    }

	void Flip(){
		foreach(AudioSource a in _flapSources){
			//play audio
			if(!a.isPlaying){
				a.clip=_flip;
				a.Play();
				break;
			}
		}
		//move up
		_velocity+=Vector3.up*_wingFlapVel.y;

		//move forward / back
		float forwardInput = Input.GetAxis("Vertical");
		//_velocity+=_flatVelocity*_wingFlapVel.z*forwardInput;
		_velocity+=transform.forward*_wingFlapVel.z*forwardInput;
		//Vector3 newVel=_velocity+_flatVelocity*_wingFlapVel.z*forwardInput;
		//prevent backward flying
		//if(Vector3.Dot(newVel.normalized,transform.forward)>0)
			//_velocity=newVel;

		//regulate vertical velocity
		if(_velocity.y>_maxVel.y)
			_velocity.y=_maxVel.y;

		//regulate forward velocity
		Vector2 forward = new Vector2(_velocity.x,_velocity.z);
		if(forward.magnitude>_maxVel.z)
		{
			forward*=(1/forward.magnitude)*_maxVel.z;
			_velocity.x=forward.x;
			_velocity.z=forward.y;
		}
	}

	void Flap(){
		foreach(AudioSource a in _flapSources){
			if(!a.isPlaying){
				a.clip=_flap;
				a.Play();
				break;
			}
		}
	}

	void OnDrawGizmos(){
		Gizmos.color=Color.blue;
		Gizmos.DrawRay(transform.position,_flatVelocity);
		Gizmos.color=Color.red;
		Gizmos.DrawRay(transform.position,_flatRight);
	}
}
